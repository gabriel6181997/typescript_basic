interface Engineer {
  name: string;
  role: string;
}

interface Blogger {
  name: string;
  follower: number;
}

// type EngineerBlogger = Engineer & Blogger;
interface EngineerBlogger extends Engineer, Blogger {}

const quill: EngineerBlogger = {
  name: 'Quill',
  role: 'front-end',
  follower: 1000
}

type NumberBoolean = number | boolean;
type StringNumber = string | number;
type Mix = NumberBoolean & StringNumber;

function toUpperCase(x: string): string;
function toUpperCase(x: number): number;
function toUpperCase(x: string | number): string | number{
  if (typeof x === 'string'){
    return x.toUpperCase()
  }
  return x;
}
const upperHello = toUpperCase('hello');
const upperHello2 = toUpperCase;
upperHello2('h1');
upperHello2(32);

interface TmpFunc {
  (x: string): number;
  (x: number): number;
}
const upperHello3: TmpFunc = function(x: string | number) {return 0}

interface FuncA {
  (a: number, b: string):number;
  (a: string, b: number):number;
}
interface FuncB {
  (a:string): number;
}
let intersectionFunc: FuncA & FuncB;
intersectionFunc = function(a: number | string, b?: number | string) {return 0}

interface FuncC {
  (a: number):number;
}
interface FuncD {
  (a: string):string;
}
let unionFunc: FuncC | FuncD;
unionFunc = function (a: number) {return 32};

type NomadWorker = Engineer | Blogger;
function describeProfile(nomadWorker: NomadWorker) {
  console.log(nomadWorker.name);
  if('role' in nomadWorker) {   // whether there is any role in nomadWorker
    console.log(nomadWorker.role)
  }
  if('follower' in nomadWorker){
    console.log(nomadWorker.follower)
  }
}

class Dog {
  kind: 'dog' = 'dog';
  speak() {
    console.log('bow-wow');
  }
}
class Bird {
  kind: 'bird' = 'bird';
  speak() {
    console.log('tweet-tweet');
  }
  fly() {
    console.log('flutter');
  }
}

type Pet = Dog | Bird;
function havePet(pet: Pet){
  pet.speak();
  switch(pet.kind) {
    case 'bird':  //Way of adding tag by using switch (same as instanceOf)
      pet.fly();
  }
  if(pet instanceof Bird){  //object generated by Class 'Bird'
    pet.fly();
  }
}
havePet(new Bird());
// havePet({speak() {console.log('hello')}, fly() {console.log('not fly')}})

// const input = document.getElementById('input') as HTMLInputElement;
// input.value = 'initial input value';
(document.getElementById('input') as HTMLInputElement).value = 'initial input value';
const textbook = document.getElementById('textbook')!; //!= not null

interface Designer {
  name: string;
  [index: string]: string;
}

const designer: Designer = {
  name: 'Quill',
  role: 'web',
}

interface DownloadedData{
  id: number;
  user?: {
    name?: {
      first:string;
      last:string;
    }
  }
}

const downloadedData: DownloadedData = {
  id:1
}

console.log(downloadedData.user?.name?.first); // ? = stop undefined error
const userData = downloadedData.user ?? 'no-user'
type id = DownloadedData["id" | "user"]
let target = 'hello';
let source: 'hello' = 'hello';
target = source;

enum Color {
  RED,
  BLUE
}

let target2 = Color.RED;
let source2 = 0;
target2 = source2;

let target3 = function (a: string, b: string) { };
let source3 = function (a: string) { };
target3 = source3;
target3('hi', 'hello');  //the second one is ignored.

class AdvancedPerson {
  name: string = 'Peter'
  age: number = 35;
}
class AdvancedCar {
  name: string = 'Prius'
  age: number = 5;
}
let target4 = new AdvancedPerson();
let source4 = new AdvancedCar();
target4 = source4;

function advancedFn(...args: [number, string, boolean?, ...number[]]) {
}
advancedFn(0,'hi',true,3,3,3,3,3)

const milk = 'milk' as const;
let drink = milk;
const array = [10,20] as const;
const Peter = {
  name: 'Peter',
  age: 38
} as const;

type PeterType = typeof Peter
